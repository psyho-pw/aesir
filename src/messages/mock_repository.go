// Code generated by mockery v2.42.1. DO NOT EDIT.

package messages

import (
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: message
func (_m *MockRepository) Create(message Message) (*Message, error) {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *Message
	var r1 error
	if rf, ok := ret.Get(0).(func(Message) (*Message, error)); ok {
		return rf(message)
	}
	if rf, ok := ret.Get(0).(func(Message) *Message); ok {
		r0 = rf(message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Message)
		}
	}

	if rf, ok := ret.Get(1).(func(Message) error); ok {
		r1 = rf(message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMany provides a mock function with given fields:
func (_m *MockRepository) FindMany() ([]Message, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindMany")
	}

	var r0 []Message
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]Message, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Message)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTimestampsByChannelIds provides a mock function with given fields: channelIds, threshold
func (_m *MockRepository) UpdateTimestampsByChannelIds(channelIds []int, threshold int) error {
	ret := _m.Called(channelIds, threshold)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTimestampsByChannelIds")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]int, int) error); ok {
		r0 = rf(channelIds, threshold)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithTx provides a mock function with given fields: tx
func (_m *MockRepository) WithTx(tx *gorm.DB) Repository {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for WithTx")
	}

	var r0 Repository
	if rf, ok := ret.Get(0).(func(*gorm.DB) Repository); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Repository)
		}
	}

	return r0
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
