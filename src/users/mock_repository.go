// Code generated by mockery v2.33.2. DO NOT EDIT.

package users

import (
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: user
func (_m *MockRepository) Create(user User) (*User, error) {
	ret := _m.Called(user)

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(User) (*User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(User) *User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMany provides a mock function with given fields: users
func (_m *MockRepository) CreateMany(users []User) ([]User, error) {
	ret := _m.Called(users)

	var r0 []User
	var r1 error
	if rf, ok := ret.Get(0).(func([]User) ([]User, error)); ok {
		return rf(users)
	}
	if rf, ok := ret.Get(0).(func([]User) []User); ok {
		r0 = rf(users)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]User)
		}
	}

	if rf, ok := ret.Get(1).(func([]User) error); ok {
		r1 = rf(users)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOne provides a mock function with given fields: id
func (_m *MockRepository) DeleteOne(id int) (*User, error) {
	ret := _m.Called(id)

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields:
func (_m *MockRepository) Find() ([]User, error) {
	ret := _m.Called()

	var r0 []User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindManagers provides a mock function with given fields:
func (_m *MockRepository) FindManagers() ([]User, error) {
	ret := _m.Called()

	var r0 []User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOne provides a mock function with given fields: id
func (_m *MockRepository) FindOne(id int) (*User, error) {
	ret := _m.Called(id)

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneBySlackId provides a mock function with given fields: id
func (_m *MockRepository) FindOneBySlackId(id string) (*User, error) {
	ret := _m.Called(id)

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateManagersByUserIds provides a mock function with given fields: ids
func (_m *MockRepository) UpdateManagersByUserIds(ids []int) error {
	ret := _m.Called(ids)

	var r0 error
	if rf, ok := ret.Get(0).(func([]int) error); ok {
		r0 = rf(ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOne provides a mock function with given fields: id, user
func (_m *MockRepository) UpdateOne(id int, user User) (*User, error) {
	ret := _m.Called(id, user)

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(int, User) (*User, error)); ok {
		return rf(id, user)
	}
	if rf, ok := ret.Get(0).(func(int, User) *User); ok {
		r0 = rf(id, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(int, User) error); ok {
		r1 = rf(id, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithTx provides a mock function with given fields: tx
func (_m *MockRepository) WithTx(tx *gorm.DB) Repository {
	ret := _m.Called(tx)

	var r0 Repository
	if rf, ok := ret.Get(0).(func(*gorm.DB) Repository); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Repository)
		}
	}

	return r0
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
