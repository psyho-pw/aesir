// Code generated by mockery v2.32.3. DO NOT EDIT.

package users

import (
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// CreateMany provides a mock function with given fields: _a0
func (_m *MockService) CreateMany(_a0 []User) ([]User, error) {
	ret := _m.Called(_a0)

	var r0 []User
	var r1 error
	if rf, ok := ret.Get(0).(func([]User) ([]User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]User) []User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]User)
		}
	}

	if rf, ok := ret.Get(1).(func([]User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOne provides a mock function with given fields: _a0
func (_m *MockService) CreateOne(_a0 *User) (*User, error) {
	ret := _m.Called(_a0)

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(*User) (*User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*User) *User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(*User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOne provides a mock function with given fields: id
func (_m *MockService) DeleteOne(id int) (*User, error) {
	ret := _m.Called(id)

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMany provides a mock function with given fields:
func (_m *MockService) FindMany() ([]User, error) {
	ret := _m.Called()

	var r0 []User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOne provides a mock function with given fields: id
func (_m *MockService) FindOne(id int) (*User, error) {
	ret := _m.Called(id)

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneBySlackId provides a mock function with given fields: id
func (_m *MockService) FindOneBySlackId(id string) (*User, error) {
	ret := _m.Called(id)

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateManagers provides a mock function with given fields: ids
func (_m *MockService) UpdateManagers(ids []int) error {
	ret := _m.Called(ids)

	var r0 error
	if rf, ok := ret.Get(0).(func([]int) error); ok {
		r0 = rf(ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOne provides a mock function with given fields: id, user
func (_m *MockService) UpdateOne(id int, user *User) (*User, error) {
	ret := _m.Called(id, user)

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(int, *User) (*User, error)); ok {
		return rf(id, user)
	}
	if rf, ok := ret.Get(0).(func(int, *User) *User); ok {
		r0 = rf(id, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(int, *User) error); ok {
		r1 = rf(id, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithTx provides a mock function with given fields: tx
func (_m *MockService) WithTx(tx *gorm.DB) Service {
	ret := _m.Called(tx)

	var r0 Service
	if rf, ok := ret.Get(0).(func(*gorm.DB) Service); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Service)
		}
	}

	return r0
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
