// Code generated by mockery v2.42.1. DO NOT EDIT.

package channels

import (
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: channel
func (_m *MockRepository) Create(channel Channel) (*Channel, error) {
	ret := _m.Called(channel)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(Channel) (*Channel, error)); ok {
		return rf(channel)
	}
	if rf, ok := ret.Get(0).(func(Channel) *Channel); ok {
		r0 = rf(channel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Channel)
		}
	}

	if rf, ok := ret.Get(1).(func(Channel) error); ok {
		r1 = rf(channel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMany provides a mock function with given fields: channels
func (_m *MockRepository) CreateMany(channels []Channel) ([]Channel, error) {
	ret := _m.Called(channels)

	if len(ret) == 0 {
		panic("no return value specified for CreateMany")
	}

	var r0 []Channel
	var r1 error
	if rf, ok := ret.Get(0).(func([]Channel) ([]Channel, error)); ok {
		return rf(channels)
	}
	if rf, ok := ret.Get(0).(func([]Channel) []Channel); ok {
		r0 = rf(channels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Channel)
		}
	}

	if rf, ok := ret.Get(1).(func([]Channel) error); ok {
		r1 = rf(channels)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOneBySlackId provides a mock function with given fields: slackId
func (_m *MockRepository) DeleteOneBySlackId(slackId string) (*Channel, error) {
	ret := _m.Called(slackId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOneBySlackId")
	}

	var r0 *Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*Channel, error)); ok {
		return rf(slackId)
	}
	if rf, ok := ret.Get(0).(func(string) *Channel); ok {
		r0 = rf(slackId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Channel)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(slackId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindFirstOne provides a mock function with given fields:
func (_m *MockRepository) FindFirstOne() (*Channel, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindFirstOne")
	}

	var r0 *Channel
	var r1 error
	if rf, ok := ret.Get(0).(func() (*Channel, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *Channel); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Channel)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMany provides a mock function with given fields:
func (_m *MockRepository) FindMany() ([]Channel, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindMany")
	}

	var r0 []Channel
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]Channel, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []Channel); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Channel)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindManyByThreshold provides a mock function with given fields: threshold
func (_m *MockRepository) FindManyByThreshold(threshold int) ([]Channel, error) {
	ret := _m.Called(threshold)

	if len(ret) == 0 {
		panic("no return value specified for FindManyByThreshold")
	}

	var r0 []Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]Channel, error)); ok {
		return rf(threshold)
	}
	if rf, ok := ret.Get(0).(func(int) []Channel); ok {
		r0 = rf(threshold)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Channel)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(threshold)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindManyWithMessage provides a mock function with given fields:
func (_m *MockRepository) FindManyWithMessage() ([]Channel, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindManyWithMessage")
	}

	var r0 []Channel
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]Channel, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []Channel); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Channel)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneBySlackId provides a mock function with given fields: slackId
func (_m *MockRepository) FindOneBySlackId(slackId string) (*Channel, error) {
	ret := _m.Called(slackId)

	if len(ret) == 0 {
		panic("no return value specified for FindOneBySlackId")
	}

	var r0 *Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*Channel, error)); ok {
		return rf(slackId)
	}
	if rf, ok := ret.Get(0).(func(string) *Channel); ok {
		r0 = rf(slackId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Channel)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(slackId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOneBySlackId provides a mock function with given fields: slackId, channel
func (_m *MockRepository) UpdateOneBySlackId(slackId string, channel Channel) (*Channel, error) {
	ret := _m.Called(slackId, channel)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOneBySlackId")
	}

	var r0 *Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(string, Channel) (*Channel, error)); ok {
		return rf(slackId, channel)
	}
	if rf, ok := ret.Get(0).(func(string, Channel) *Channel); ok {
		r0 = rf(slackId, channel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Channel)
		}
	}

	if rf, ok := ret.Get(1).(func(string, Channel) error); ok {
		r1 = rf(slackId, channel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateThreshold provides a mock function with given fields: threshold
func (_m *MockRepository) UpdateThreshold(threshold int) error {
	ret := _m.Called(threshold)

	if len(ret) == 0 {
		panic("no return value specified for UpdateThreshold")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(threshold)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithTx provides a mock function with given fields: tx
func (_m *MockRepository) WithTx(tx *gorm.DB) Repository {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for WithTx")
	}

	var r0 Repository
	if rf, ok := ret.Get(0).(func(*gorm.DB) Repository); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Repository)
		}
	}

	return r0
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
